import { Injectable, OnInit } from '@angular/core';import { Router } from '@angular/router';import * as firebase from 'firebase/app';import { AngularFireAuth } from 'angularfire2/auth';import { AngularFirestore } from 'angularfire2/firestore';import { FirebaseService } from '../services/firebase.service';import { ErrorService } from '../services/error.service';import { AccountLogService } from '../services/account-log.service';import { Observable } from 'rxjs/Observable';import 'rxjs/add/operator/first'import 'rxjs/add/operator/toPromise';import 'rxjs/add/operator/map';import { PetParent } from '../interfaces/PetParent';@Injectable()export class AuthService implements OnInit {  public userFb$: Observable<firebase.User>;  public petParent: Observable<PetParent>;  getUserFb$(): Observable<firebase.User> {    return this.userFb$ = this.afAuth.authState;  }  ////////////////////////////////////  ////////// SignIn Methods //////////  ////////////////////////////////////  signInWithEmail(email, password) {    this.afAuth.auth.signInWithEmailAndPassword(email, password)      .then( (user) => {        if (user == null) {          console.log(`No user`);          this.router.navigate([`signup`])            .catch(err => this._es.handleError(err))        } else {          console.log(`Logged in with ${user.email}`);          this.router.navigate([`dashboard`])            .catch(err => this._es.handleError(err))        }      })      .catch(err => this._es.handleError(err))  }  private OAuthSignIn(provider) {    this.afAuth.auth.signInWithPopup(provider)      .then(result => {        // This gives you a provider Access Token        let token = result.credential.accessToken;        // The signed-in user info        let user = result.user;        this._fs.userExists(user)          .first()          .subscribe(userExistsFireBase => {            if (user !== null && !!userExistsFireBase) {              console.log(`Logged in as ${user.displayName} with ${user.email}`);              console.log(`UID: ${user.uid}`);              this._als.log('login');              this.router.navigate([`dashboard`])                .catch(err => this._es.handleError(err))            } else if (user !== null && !userExistsFireBase) {              console.log(`user profile doesn't exist`);              this.OAuthSignUp(provider);            } else {              console.log(`No user`);              this.router.navigate([`signin`])                .catch(err => this._es.handleError(err))            }          })      })      .catch(err => this._es.handleError(err))  }  signInGoogle() {    const provider = new firebase.auth.GoogleAuthProvider();    return this.OAuthSignIn(provider);  }  signInFacebook() {    const provider = new firebase.auth.FacebookAuthProvider();    return this.OAuthSignIn(provider);  }  signInTwitter() {    const provider = new firebase.auth.TwitterAuthProvider();    return this.OAuthSignIn(provider);  }  // ////////////////////////////////////  // ////////// SignUp Methods //////////  // ////////////////////////////////////  signUpWithEmail(email, password) {    this.afAuth.auth.createUserWithEmailAndPassword(email, password)      .then( (user) => {        // Log to console        console.log(`signed up with ${user.email}`);        console.log(user.toJSON());        // Update user details on FireStore        this._fs.getFsUserDoc(user).set({          contactInfo: {            email: user.email          },          uid: user.uid,          registrationDate: new Date(),          photoURL: user.photoURL,        })          .catch(err => this._es.handleError(err));        this.router.navigate([`dashboard/complete-profile`])          .catch(err => console.error(err))      })      .catch(err => this._es.handleError(err))  }  private OAuthSignUp(provider) {    this.afAuth.auth.signInWithPopup(provider)      .then((result) => {        // This gives you a Google Access Token.        let token = result.credential.accessToken;        // The signed-in user info.        let user = result.user;        if (user == null) {          console.log(`No user`);          this.router.navigate([`signup`])            .catch(err => this._es.handleError(err))        } else {          // Update user details on FireStore          this._fs.getFsUserDoc(user).set({            contactInfo: {              email: user.email            },            uid: user.uid,            registrationDate: new Date(),            photoURL: user.photoURL,          }).then(() => {            // Log to console            console.log(`You signed up with ${user.email}`);            console.log(user.toJSON());          }).catch(err => console.error(err));          this.router.navigate([`dashboard/complete-profile`])            .catch(err => this._es.handleError(err))        }      })      .catch(err => this._es.handleError(err));  }  signUpGoogle() {    const provider = new firebase.auth.GoogleAuthProvider();    return this.OAuthSignUp(provider)  }  signUpFacebook() {    const provider = new firebase.auth.FacebookAuthProvider();    return this.OAuthSignUp(provider)  }  signOut() {    // this._als.log('logout');    this.afAuth.auth.signOut()      .then(() => console.log(`Signed out`))      .catch(err => console.error(err));    this.router.navigate([`signin`])      .catch(err => this._es.handleError(err));  }  constructor(private router: Router,              private afAuth: AngularFireAuth,              private afs: AngularFirestore,              private _fs: FirebaseService,              private _es: ErrorService,              private _als: AccountLogService) { }  ngOnInit() {    this.petParent = this.afAuth.authState      .switchMap(user => {        if (user) {          return this.afs.doc<PetParent>(`petParents/${user.uid}`)            .valueChanges()        } else {          return Observable.of(null);        }      });    this.getUserFb$();  }}